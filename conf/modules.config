/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    

    
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
    


    ext.args = " "
    
    withName: 'BBMAP_DEDUPE' {
        cpus   = { check_max( params.bbmap_dedupe_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( (params.bbmap_dedupe_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max( ( params.bbmap_dedupe_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.bbmap_dedupe_args ?: "dedupe optical spany adjacent"}
        if (params.bbmap_dedupe_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    withName: 'BBMAP_FILTER' {
        cpus   = { check_max( params.bbmap_filter_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.bbmap_filter_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.bbmap_filter_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.bbmap_filter_args ?: "minid=0.75"}
        if (params.bbmap_filter_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    withName: 'BBMAP_REFORMAT' {
        cpus   = { check_max( params.bbmap_reformat_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.bbmap_reformat_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.bbmap_reformat_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = {params.bbmap_reformat_args ?: "minconsecutivebases=100 dotdashxton=true fastawrap=32000" }
        if (params.bbmap_reformat_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    withName: 'BLAT' {
        cpus   = { check_max( params.blat_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.blat_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.blat_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = {params.blat_args ?: "-out=blast8"}
        if (params.blat_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    withName: 'SED' {
        cpus   = { check_max( params.sed_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.sed_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.sed_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.sed_args ?: ""}
        if (params.sed_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    withName: 'CONCATENATE' {
        cpus   = { check_max( params.concatenate_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.concatenate_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.concatenate_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.concatenate_args ?: "" }
        if (params.concatenate_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'CONCATENATE_RAW' {
        cpus   = { check_max( params.concatenate_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.concatenate_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.concatenate_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.concatenate_args ?:  "" }
        if (params.concatenate_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'GBLOCKS' {
        cpus   = { check_max( params.gblocks_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.gblocks_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.gblocks_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.gblocks_args ?: "-t=DNA -b3=8 -b4=10 -b5=h -p=n" }
        ext.gblocks_b1 = { params.gblocks_b1 }
        ext.gblocks_b2 = { params.gblocks_b2 }
        if (params.gblocks_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    
    
   
    withName: 'MAFFT' {
        cpus   = { check_max( params.mafft_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.mafft_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.mafft_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.mafft_args ?: "--maxiterate 1000 --globalpair --adjustdirection --quiet" }
        if (params.mafft_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    withName: 'MAKE_PRG' {
        cpus   = { check_max( params.make_prg_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.make_prg_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.make_prg_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.make_prg_args ?: "--kept-tags easy_recip_match,complicated_recip_match" }
        if (params.make_prg_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
        
    withName: 'PARSE_BLAT_RESULTS' {
        cpus   = { check_max( params.parse_blat_results_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.parse_blat_results_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.parse_blat_results_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.parse_blat_results_args ?: "--evalue 1e-10 --match 80" }
        if (params.parse_blat_results_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'PEAR' {
        cpus   = { check_max( params.pear_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.pear_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.pear_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.pear_args ?: "" }
        if (params.pear_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'PERL_CLEANUP' {
        cpus   = { check_max( params.perl_cleanup_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.perl_cleanup_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.perl_cleanup_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.perl_cleanup_args ?: " -pi -w -e \"s/!/N/g;\" " }
        if (params.perl_cleanup_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'PHYLOGENY_MAKE_ALIGNMENTS' {
        cpus   = { check_max( params.phylogeny_make_alignments_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.phylogeny_make_alignments_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.phylogeny_make_alignments_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.phylogeny_make_alignments_args ?: "--minsamp 4" }
        if (params.phylogeny_make_alignments_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }


    
    withName: 'PREPARE_ADAPTOR' {
        cpus   = { check_max( params.prepare_adaptor_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.prepare_adaptor_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.prepare_adaptor_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.prepare_adaptor_args ?:  ""  }
        if (params.prepare_adaptor_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
       
    
    withName: 'QUALITY_2_ASSEMBLY' {
        cpus   = { check_max( params.quality_2_assembly_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.quality_2_assembly_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.quality_2_assembly_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.quality_2_assembly_args ?:  ""  }
        if (params.quality_2_assembly_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    withName: 'RAXML' {
        cpus   = { check_max( params.raxml_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.raxml_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.raxml_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.raxml_args ?: "-m GTRCAT -f a -n" }
        ext.raxml_runs = { params.raxml_runs ?: 100   }
        if (params.raxml_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }


   withName: 'TRIMMOMATIC' {
        cpus   = { check_max( params.trimmomatic_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trimmomatic_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trimmomatic_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_args ?: "-phred33" }
        if (params.trimmomatic_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    withName: 'TRIMMOMATIC_CLEAN_PE' {
        cpus   = { check_max( params.trimmomatic_clean_pe_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trimmomatic_clean_pe_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trimmomatic_clean_pe_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_clean_pe_args ?: "-phred33 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36" }
        if (params.trimmomatic_clean_pe_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    withName: 'TRIMMOMATIC_CLEAN_SE' {
        cpus   = { check_max( params.trimmomatic_clean_se_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trimmomatic_clean_se_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trimmomatic_clean_se_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_clean_se_args ?: "-phred33 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36" }
        if (params.trimmomatic_clean_se_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    
   withName: 'TRINITY' {
        cpus   = { check_max( params.trinity_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trinity_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trinity_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.trinity_args ?: "--seqType fq --NO_SEQTK --normalize_reads" }
        scratch = { params.trinity_scratch_tmp ? true : false }
        if (params.trinity_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
    withName: 'ASSEMBLY_POSTPROCESSING' {
        ext.assembly_header = { params.assembly_processed_header ?: "contig" }
        cpus   = { check_max( params.assembly_postprocessing_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.assembly_postprocessing_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.assembly_postprocessing_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        if (params.assembly_postprocessing_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'MERGE_TREES' {
        cpus   = { check_max( params.merge_trees_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.merge_trees_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.merge_trees_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.merge_trees_args ?:  ""}
        if (params.merge_trees_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'ASTER' {
        cpus   = { check_max( params.aster_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.aster_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.aster_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.aster_args ?: "" }
        if (params.aster_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        
    }
    withName: 'IQTREE' {
        cpus   = { check_max( params.iqtree_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.iqtree_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.iqtree_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.iqtree_args ?: "--minsamp 4 --quiet -B 1000" }
        if (params.iqtree_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    

    withName: 'SPADES' {
        cpus   = { check_max( params.spades_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.spades_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.spades_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.spades_args ?: "" }
        if (params.spades_keep_output){
            publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    
}

