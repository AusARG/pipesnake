/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    /*
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
    */


    ext.args = " "
    
    withName: 'BBMAP_DEDUPE' {
        cpus   = { check_max( params.bbmap_dedupe_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( (params.bbmap_dedupe_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max( ( params.bbmap_dedupe_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = " ac=f " 
    }

    withName: 'BBMAP_FILTER' {
        cpus   = { check_max( params.bbmap_filter_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.bbmap_filter_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.bbmap_filter_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.bbmap_filter_args == null ? " minid=${params.bbmap_filter_minid} " : params.bbmap_filter_args}
    }
    
    withName: 'BBMAP_REFORMAT' {
        cpus   = { check_max( params.bbmap_reformat_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.bbmap_reformat_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.bbmap_reformat_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = {params.bbmap_reformat_args == null ? " " : params.bbmap_reformat_args}
    }
    
    withName: 'BBMAP_REFORMAT2' {
        cpus   = { check_max( params.bbmap_reformat2_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.bbmap_reformat2_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.bbmap_reformat2_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = {params.bbmap_reformat2_args == null ? " minconsecutivebases=${params.bbmap_reformat_minconsecutivebases} dotdashxton=${params.bbmap_reformat_dotdashxton} fastawrap=${params.bbmap_reformat_fastawrap} " : params.bbmap_reformat2_args }
    }
    withName: 'BLAT' {
        cpus   = { check_max( params.blat_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.blat_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.blat_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = {params.blat_args == null ? " -out=blast8 " : " "}
    }
    

    withName: 'SED' {
        cpus   = { check_max( params.sed_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.sed_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.sed_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.sed_args == null ? " " : params.sed_args }
    }
    withName: 'CONCATENATE' {
        cpus   = { check_max( params.concatenate_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.concatenate_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.concatenate_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.concatenate_args == null ? " " : params.concatenate_args }
    }

    withName: 'CONCATENATE_RAW' {
        cpus   = { check_max( params.concatenate_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.concatenate_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.concatenate_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.concatenate_args == null ? " " : params.concatenate_args }
    }

    withName: 'CONVERT_PHYML' {
        cpus   = { check_max( params.convert_phyml_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.convert_phyml_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.convert_phyml_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.convert_phyml_args == null ? " " :   params.convert_phyml_args }
    }
    withName: 'GBLOCKS' {
        cpus   = { check_max( params.gblocks_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.gblocks_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.gblocks_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.gblocks_args == null ? " -t=DNA -b3=${params.gblocks_b3} -b4=${params.gblocks_b4} -b5=h -p=n " : params.gblocks_args  }
        ext.gblocks_b1 = { params.gblocks_b1 }
        ext.gblocks_b2 = { params.gblocks_b2 }
    }
    /*
    withName: 'MACSE' {
        cpus   = { check_max( params.macse_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.macse_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.macse_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.macse_args_refine = { params.macse_args_refine == null ? " -stop ${params.macse_stop} -prog refineAlignment " : params.macse_args_refine }
        ext.macse_args_refineLemmon = { params.macse_args_refineLemmon  == null ? " -prog refineAlignment -optim ${params.macse_refine_alignment_optim} -local_realign_init ${params.macse_refine_alignment_local_realign_init} -local_realign_dec ${params.macse_refine_alignment_local_realign_dec} -fs ${params.macse_refine_alignment_fs} " : params.macse_args_refineLemmon }
        ext.macse_args_export = { params.macse_args_export  == null ? " -prog exportAlignment -stop ${params.macse_stop} " : params.macse_args_export }
        ext.macse_args_align = { params.macse_args_align  == null ? "  -prog alignSequences -stop_lr ${params.macse_stop} " : params.macse_args_align } 
    }
*/



    
   
    withName: 'MAFFT' {
        cpus   = { check_max( params.mafft_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.mafft_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.mafft_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.mafft_args == null ? " --maxiterate ${params.mafft_maxiterate} --globalpair --adjustdirection --quiet " : params.mafft_args }
    }
    withName: 'MAKE_PRG' {
        cpus   = { check_max( params.make_prg_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.make_prg_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.make_prg_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.make_prg_args == null ? " --kept-tags ${params.make_prg_kept_tags} " :  params.make_prg_args  }
    }
        
    withName: 'PARSE_BLAT_RESULTS' {
        cpus   = { check_max( params.parse_blat_results_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.parse_blat_results_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.parse_blat_results_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.parse_blat_results_args == null ? " --evalue ${params.blat_parser_evalue} --match ${params.blat_parser_match} " : params.parse_blat_results_args }
    }
    withName: 'PEAR' {
        cpus   = { check_max( params.pear_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.pear_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.pear_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.pear_args == null ? "  " : params.pear_args }
    }
    withName: 'PERL_CLEANUP' {
        cpus   = { check_max( params.perl_cleanup_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.perl_cleanup_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.perl_cleanup_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.perl_cleanup_args == null ? " -pi -w -e \"s/!/N/g;\" " : params.perl_cleanup_args }
    }
    withName: 'PHYLOGENY_MAKE_ALIGNMENTS' {
        cpus   = { check_max( params.phylogeny_make_alignments_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.phylogeny_make_alignments_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.phylogeny_make_alignments_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.phylogeny_make_alignments_args == null ? " --minsamp ${params.phylogeny_make_alignments_minsamp} " : params.phylogeny_make_alignments_args  }
    }
    withName: 'PREPARE_ADAPTOR' {
        cpus   = { check_max( params.prepare_adaptor_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.prepare_adaptor_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.prepare_adaptor_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.prepare_adaptor_args == null ? " " : params.prepare_adaptor_args  }
    }
    withName: 'PREPARE_SAMPLESHEET' {
        cpus   = { check_max( params.prepare_samplesheet_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.prepare_samplesheet_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.prepare_samplesheet_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.prepare_samplesheet_args == null ? " " : params.prepare_samplesheet_args }
    }
    

    
    withName: 'QUALITY_2_ASSEMBLY' {
        cpus   = { check_max( params.quality_2_assembly_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.quality_2_assembly_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.quality_2_assembly_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.quality_2_assembly_args == null ? " " : params.quality_2_assembly_args  }
    }
    withName: 'RAXML' {
        cpus   = { check_max( params.raxml_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.raxml_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.raxml_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.raxml_args == null ? " -m GTRCAT -f a -n " : params.raxml_args  }
        ext.args.raxml_runs = { params.raxml_runs == null ? 100 : params.raxml_runs  }
    }

    withName: 'SAMPLESHEET_CHECK' {
        cpus   = { check_max( params.samplesheet_check_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.samplesheet_check_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.samplesheet_check_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.samplesheet_check_args == null ? " " : params.samplesheet_check_args }
    }
    
    withName: 'TRIMMOMATIC' {
        cpus   = { check_max( params.trimmomatic_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trimmomatic_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trimmomatic_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_args == null ? " -phred33 " : params.trimmomatic_args }
    }
    
    withName: 'TRIMMOMATIC_CLEAN_PE' {
        cpus   = { check_max( params.trimmomatic_clean_pe_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trimmomatic_clean_pe_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trimmomatic_clean_pe_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_clean_pe_args == null ? " -phred33 LEADING:${params.trimmomatic_clean_head} TRAILING:${params.trimmomatic_clean_trail} SLIDINGWINDOW:4:${params.trimmomatic_clean_qual} MINLEN:${params.trimmomatic_clean_minlength} " : params.trimmomatic_clean_pe_args }
    }
    withName: 'TRIMMOMATIC_CLEAN_SE' {
        cpus   = { check_max( params.trimmomatic_clean_se_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trimmomatic_clean_se_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trimmomatic_clean_se_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_clean_se_args == null ? " -phred33 LEADING:${params.trimmomatic_clean_head} TRAILING:${params.trimmomatic_clean_trail} SLIDINGWINDOW:4:${params.trimmomatic_clean_qual} MINLEN:${params.trimmomatic_clean_minlength} " : params.trimmomatic_clean_se_args }
    }

    
   withName: 'TRINITY' {
        cpus   = { check_max( params.trinity_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.trinity_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.trinity_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { [ " ",
                    params.trinity_args == null ? "  --seqType fq --NO_SEQTK " : params.trinity_args, 
                    params.trinity_normalize_reads ? " --normalize_reads" : ""
                   ].join(" ").trim()
        }
        ext.trinity_header = { params.trinity_processed_header == null ? "contig" : params.trinity_processed_header } 
        scratch = { params.trinity_scratch_tmp ? true : false }
    }
     withName: 'MERGE_TREES' {
        cpus   = { check_max( params.merge_trees_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.merge_trees_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.merge_trees_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.merge_trees_args == null ? " " : params.merge_trees_args }
    }
    withName: 'ASTER' {
        cpus   = { check_max( params.aster_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.aster_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.aster_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = params.aster_args == null ? " " : "${params.aster_args}"
        
    }
    withName: 'IQTREE' {
        cpus   = { check_max( params.iqtree_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.iqtree_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.iqtree_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.iqtree_args == null ? " --quiet -B 1000 " : " " }
    }
    /*
    
    withName: 'PREPROCESSING' {
        cpus   = { check_max( params.preprocessing_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.preprocessing_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.preprocessing_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.preprocessing_args == null ? " " : params.preprocessing_args }
    }
   
    
    */

}

